// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


// model Example {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

model Post {
    id           String   @id @default(cuid())
    contents     String
    creationDate DateTime @default(now())
    author       User @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId     String
    likes        Like[]
    comments     Comment[]


    @@index([authorId])
}

model Like {
    id         String     @id @default(cuid())
    author     User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId   String
    post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId     String

    @@index([authorId])
    @@index([postId])
    @@unique([authorId, postId])
    
}

model Comment {
    id         String     @id @default(cuid())
    contents   String
    creationDate DateTime @default(now())
    author     User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId   String
    post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId     String

    @@index([authorId])
    @@index([postId])
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Non-next auth fields
  posts     Post[]
  likes     Like[]
  comments  Comment[]

  // Define the many-to-many followers/following relationship
  followers User[]  @relation("Followers")
  following User[]  @relation("Followers")
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
